// <auto-generated />
using System;
using Education.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Education.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250518112956_ChangedTests")]
    partial class ChangedTests
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Education.DAL.Models.Answer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Answers")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("answer");

                    b.Property<long>("PracticalMaterialBindQuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("practical_material_bind_question_id");

                    b.Property<long>("TestResultId")
                        .HasColumnType("bigint")
                        .HasColumnName("test_result_id");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PracticalMaterialBindQuestionId");

                    b.HasIndex("TestResultId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Education.DAL.Models.Case", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pm_name");

                    b.Property<long>("PracticalMaterialId")
                        .HasColumnType("bigint")
                        .HasColumnName("practical_material_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("case_text");

                    b.HasKey("Id");

                    b.HasIndex("PracticalMaterialId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("Education.DAL.Models.CaseFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CaseId")
                        .HasColumnType("bigint")
                        .HasColumnName("case_id");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_accepted");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserId");

                    b.ToTable("CaseFiles");
                });

            modelBuilder.Entity("Education.DAL.Models.CaseFileComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CaseFileId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<bool>("IsGenerated")
                        .HasColumnType("boolean")
                        .HasColumnName("is_generated");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cfc_text");

                    b.HasKey("Id");

                    b.HasIndex("CaseFileId");

                    b.ToTable("CaseFileComments");
                });

            modelBuilder.Entity("Education.DAL.Models.Course", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("c_name");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Education.DAL.Models.CourseBindUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseBindUsers");
                });

            modelBuilder.Entity("Education.DAL.Models.Module", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CourseId")
                        .HasColumnType("bigint")
                        .HasColumnName("course_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("m_name");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("Education.DAL.Models.PracticalMaterial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsPublic")
                        .HasColumnType("boolean")
                        .HasColumnName("is_public");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pm_name");

                    b.Property<int>("TriesCount")
                        .HasColumnType("integer")
                        .HasColumnName("tries_count");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("PracticalMaterials");
                });

            modelBuilder.Entity("Education.DAL.Models.PracticalMaterialBindQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("PracticalMaterialId")
                        .HasColumnType("bigint")
                        .HasColumnName("practical_material_id");

                    b.Property<long>("QuestionId")
                        .HasColumnType("bigint")
                        .HasColumnName("question_id");

                    b.HasKey("Id");

                    b.HasIndex("PracticalMaterialId");

                    b.HasIndex("QuestionId");

                    b.ToTable("PracticalMaterialBindQuestions");
                });

            modelBuilder.Entity("Education.DAL.Models.Question", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("answer");

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint")
                        .HasColumnName("module_id");

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("jsonb")
                        .HasColumnName("question_body");

                    b.Property<long>("QuestionTypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("question_type_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("question_text");

                    b.Property<double>("Weight")
                        .HasColumnType("double precision")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Education.DAL.Models.QuestionType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("qt_name");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Вопрос с одним ответом"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Вопрос с несколькими ответами"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Вопрос с соотнесением"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Вопрос с вводом ответа"
                        });
                });

            modelBuilder.Entity("Education.DAL.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("r_name");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Администратор"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Преподаватель"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Студент"
                        });
                });

            modelBuilder.Entity("Education.DAL.Models.TestResult", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_completed");

                    b.Property<double?>("MaxScore")
                        .HasColumnType("double precision")
                        .HasColumnName("max_score");

                    b.Property<long>("PracticalMaterialId")
                        .HasColumnType("bigint")
                        .HasColumnName("practical_material_id");

                    b.Property<double?>("Score")
                        .HasColumnType("double precision")
                        .HasColumnName("score");

                    b.Property<DateTime>("StatedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<DateTime?>("TurnedDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("turned_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("PracticalMaterialId");

                    b.HasIndex("UserId");

                    b.ToTable("TestResults");
                });

            modelBuilder.Entity("Education.DAL.Models.TheoreticalMaterial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ModuleId")
                        .HasColumnType("bigint")
                        .HasColumnName("module_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("tm_name");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("lecture_text");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("TheoreticalMaterials");
                });

            modelBuilder.Entity("Education.DAL.Models.TheoreticalMaterialFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path");

                    b.Property<long>("TheoreticalMaterialId")
                        .HasColumnType("bigint")
                        .HasColumnName("theoretical_material_id");

                    b.HasKey("Id");

                    b.HasIndex("TheoreticalMaterialId");

                    b.ToTable("TheoreticalMaterialFiles");
                });

            modelBuilder.Entity("Education.DAL.Models.TheoreticalMaterialLink", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("link");

                    b.Property<long>("TheoreticalMaterialId")
                        .HasColumnType("bigint")
                        .HasColumnName("theoretical_material_id");

                    b.HasKey("Id");

                    b.HasIndex("TheoreticalMaterialId");

                    b.ToTable("TheoreticalMaterialLinks");
                });

            modelBuilder.Entity("Education.DAL.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("login");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint")
                        .HasColumnName("role_id");

                    b.HasKey("Id");

                    b.HasIndex("Login")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            FirstName = "Admin",
                            LastName = "Admin",
                            Login = "Admin",
                            MiddleName = "Admin",
                            Password = "wcIksDzZvHtqhtd/XazkAZF2bEhc1V3EjK+ayHMzXW8=",
                            RoleId = 1L
                        });
                });

            modelBuilder.Entity("Education.DAL.Models.Answer", b =>
                {
                    b.HasOne("Education.DAL.Models.PracticalMaterialBindQuestion", "PracticalMaterialBindQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("PracticalMaterialBindQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Education.DAL.Models.TestResult", "TestResult")
                        .WithMany("Answers")
                        .HasForeignKey("TestResultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Education.DAL.Models.User", null)
                        .WithMany("Answers")
                        .HasForeignKey("UserId");

                    b.Navigation("PracticalMaterialBindQuestion");

                    b.Navigation("TestResult");
                });

            modelBuilder.Entity("Education.DAL.Models.Case", b =>
                {
                    b.HasOne("Education.DAL.Models.PracticalMaterial", "PracticalMaterial")
                        .WithMany("Cases")
                        .HasForeignKey("PracticalMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PracticalMaterial");
                });

            modelBuilder.Entity("Education.DAL.Models.CaseFile", b =>
                {
                    b.HasOne("Education.DAL.Models.Case", "Case")
                        .WithMany("CaseFiles")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Education.DAL.Models.User", "User")
                        .WithMany("CaseFiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Education.DAL.Models.CaseFileComment", b =>
                {
                    b.HasOne("Education.DAL.Models.CaseFile", "CaseFile")
                        .WithMany("Comments")
                        .HasForeignKey("CaseFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CaseFile");
                });

            modelBuilder.Entity("Education.DAL.Models.Course", b =>
                {
                    b.HasOne("Education.DAL.Models.User", "User")
                        .WithMany("Courses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Education.DAL.Models.CourseBindUser", b =>
                {
                    b.HasOne("Education.DAL.Models.Course", "Course")
                        .WithMany("CourseBindUsers")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Education.DAL.Models.User", "User")
                        .WithMany("CourseBindUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Education.DAL.Models.Module", b =>
                {
                    b.HasOne("Education.DAL.Models.Course", "Course")
                        .WithMany("Modules")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Education.DAL.Models.PracticalMaterial", b =>
                {
                    b.HasOne("Education.DAL.Models.Module", "Module")
                        .WithMany("PracticalMaterials")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Education.DAL.Models.PracticalMaterialBindQuestion", b =>
                {
                    b.HasOne("Education.DAL.Models.PracticalMaterial", "PracticalMaterial")
                        .WithMany("PracticalMaterialBindQuestions")
                        .HasForeignKey("PracticalMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Education.DAL.Models.Question", "Question")
                        .WithMany("PracticalMaterialBindQuestions")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PracticalMaterial");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Education.DAL.Models.Question", b =>
                {
                    b.HasOne("Education.DAL.Models.Module", "Module")
                        .WithMany("Questions")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Education.DAL.Models.QuestionType", "QuestionType")
                        .WithMany()
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("Education.DAL.Models.TestResult", b =>
                {
                    b.HasOne("Education.DAL.Models.PracticalMaterial", "PracticalMaterial")
                        .WithMany()
                        .HasForeignKey("PracticalMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Education.DAL.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PracticalMaterial");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Education.DAL.Models.TheoreticalMaterial", b =>
                {
                    b.HasOne("Education.DAL.Models.Module", "Module")
                        .WithMany("TheoreticalMaterials")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Module");
                });

            modelBuilder.Entity("Education.DAL.Models.TheoreticalMaterialFile", b =>
                {
                    b.HasOne("Education.DAL.Models.TheoreticalMaterial", "TheoreticalMaterial")
                        .WithMany("Files")
                        .HasForeignKey("TheoreticalMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TheoreticalMaterial");
                });

            modelBuilder.Entity("Education.DAL.Models.TheoreticalMaterialLink", b =>
                {
                    b.HasOne("Education.DAL.Models.TheoreticalMaterial", "TheoreticalMaterial")
                        .WithMany("Links")
                        .HasForeignKey("TheoreticalMaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TheoreticalMaterial");
                });

            modelBuilder.Entity("Education.DAL.Models.User", b =>
                {
                    b.HasOne("Education.DAL.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Education.DAL.Models.Case", b =>
                {
                    b.Navigation("CaseFiles");
                });

            modelBuilder.Entity("Education.DAL.Models.CaseFile", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Education.DAL.Models.Course", b =>
                {
                    b.Navigation("CourseBindUsers");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("Education.DAL.Models.Module", b =>
                {
                    b.Navigation("PracticalMaterials");

                    b.Navigation("Questions");

                    b.Navigation("TheoreticalMaterials");
                });

            modelBuilder.Entity("Education.DAL.Models.PracticalMaterial", b =>
                {
                    b.Navigation("Cases");

                    b.Navigation("PracticalMaterialBindQuestions");
                });

            modelBuilder.Entity("Education.DAL.Models.PracticalMaterialBindQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Education.DAL.Models.Question", b =>
                {
                    b.Navigation("PracticalMaterialBindQuestions");
                });

            modelBuilder.Entity("Education.DAL.Models.TestResult", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("Education.DAL.Models.TheoreticalMaterial", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Links");
                });

            modelBuilder.Entity("Education.DAL.Models.User", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("CaseFiles");

                    b.Navigation("CourseBindUsers");

                    b.Navigation("Courses");
                });
#pragma warning restore 612, 618
        }
    }
}
